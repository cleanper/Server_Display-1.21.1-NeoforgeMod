name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_COUNTER: ${{ github.run_number }}
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [21]
      fail-fast: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build --parallel --no-daemon --stacktrace --build-cache --configuration-cache --console=plain

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            build/libs/*.jar
            build/reports/tests/test
          retention-days: 0

  release:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build/libs/

      - id: get_version
        run: |
          JAR_FILE=$(ls build/libs/*.jar | grep -v -e '-plain' -e '-javadoc' -e '-sources' | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No JAR file found in build/libs/" >&2
            exit 1
          fi
          BASE_NAME=$(basename "$JAR_FILE" .jar)
          NEW_JAR_NAME="${BASE_NAME}+build.${BUILD_COUNTER}.jar"
          cp "$JAR_FILE" "build/libs/${NEW_JAR_NAME}"
          echo "version=${BASE_NAME}+build.${BUILD_COUNTER}" >> $GITHUB_OUTPUT
          echo "jar_file=build/libs/${NEW_JAR_NAME}" >> $GITHUB_OUTPUT

      - name: Create zip of source code
        run: zip -r source-code.zip . -x '*.git*' '*.gradle*' '*.idea*' '*.DS_Store*' -q

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: ${{ steps.get_version.outputs.version }}
          body: "Automated release built by GitHub Actions"
          files: |
            ${{ steps.get_version.outputs.jar_file }}
            source-code.zip
          draft: false
          prerelease: false
          generate_release_notes: true
