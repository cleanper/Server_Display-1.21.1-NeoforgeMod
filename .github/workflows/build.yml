name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_COUNTER: ${{ github.run_number }}
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [21]

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'gradle'

      - run: chmod +x ./gradlew

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - run: ./gradlew build --parallel --no-daemon --stacktrace

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            build/libs/*.jar
            build/reports/tests/test
          retention-days: 0

  release:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      BUILD_COUNTER: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: artifacts

      - name: Prepare release assets
        id: prepare_assets
        run: |
          JAR_PATH=$(find artifacts -path '*/build/libs/*.jar' -not -name '*-plain*' -not -name '*-javadoc*' -not -name '*-sources*' | head -n 1)
          
          if [ -z "$JAR_PATH" ]; then
            echo "::error::No valid JAR file found in artifacts"
            exit 1
          fi
          
          JAR_FILE=$(basename "$JAR_PATH")
          BASE_NAME=$(basename "$JAR_FILE" .jar)
          NEW_JAR_NAME="${BASE_NAME}+build.${BUILD_COUNTER}.jar"
          
          mkdir -p release-assets/libs
          
          cp "$JAR_PATH" "release-assets/libs/$NEW_JAR_NAME"
          
          find artifacts -path '*/build/reports/tests/test' -exec cp -r {} release-assets/test-reports \; || true
          
          echo "version=${BASE_NAME}+build.${BUILD_COUNTER}" >> $GITHUB_OUTPUT
          echo "jar_file=release-assets/libs/${NEW_JAR_NAME}" >> $GITHUB_OUTPUT
          echo "test_reports=release-assets/test-reports" >> $GITHUB_OUTPUT

      - name: Create source code zip
        run: zip -r release-assets/source-code.zip . -x '*.git*' 'build/*' '.gradle/*' '*.idea*' '*.DS_Store*'

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.prepare_assets.outputs.version }}
          name: ${{ steps.prepare_assets.outputs.version }}
          body: "Automated release built by GitHub Actions"
          files: |
            ${{ steps.prepare_assets.outputs.jar_file }}
            ${{ steps.prepare_assets.outputs.test_reports }}/*
            release-assets/source-code.zip
          draft: false
          prerelease: false
          generate_release_notes: true
